# Learn more about services, parameters and containers at
# https://symfony.com/doc/current/service_container.html
parameters:
    #parameter_name: value

services:
    # main configuration for services in *this* file
    _defaults:
        # automatically injects dependencies in your services
        autowire: true
        # automatically registers your services as commands, event subscribers, etc.
        autoconfigure: true
        # this means you cannot fetch services directly from the container via $container->get()
        # if you need to do this, you can override this setting on individual services
        public: false
    app.pagination:
        class: AppBundle\Services\PaginationService
        public: true
    app.form.registration:
        class: AppBundle\Form\RegistrationType
        tags:
            - { name: form.type, alias: app_user_registration }
    ap_user.edit.form.type:
        class: AppBundle\Form\ProfileFormType
        tags:
            - { name: form.type, alias: app_user_profile }
    admin.category:
        class: AdminBundle\Admin\CategoryAdmin
        arguments: [~, AppBundle\Entity\Category, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: Category }
    admin.product:
        class: AdminBundle\Admin\ProductAdmin
        arguments: [~, AppBundle\Entity\Product, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: Product }
    admin.user:
        class: AdminBundle\Admin\UserAdmin
        arguments: [~, AppBundle\Entity\User, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: User }
    admin.feedback:
        class: AdminBundle\Admin\FeedbackAdmin
        arguments: [~, AppBundle\Entity\Feedback, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: Feedback }
    admin.feedbackImage:
        class: AdminBundle\Admin\Image\FeedbackImageAdmin
        arguments: [~, AppBundle\Entity\Image\FeedbackImage, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: Images }
    # makes classes in src/AppBundle available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    AppBundle\:
        resource: '../../src/AppBundle/*'
        # you can exclude directories or files
        # but if a service is unused, it's removed anyway
        exclude: '../../src/AppBundle/{Entity,Repository,Tests}'

    # controllers are imported separately to make sure they're public
    # and have a tag that allows actions to type-hint services
    AppBundle\Controller\:
        resource: '../../src/AppBundle/Controller'
        public: true
        tags: ['controller.service_arguments']

    # add more services, or override services that need manual wiring
    # AppBundle\Service\ExampleService:
    #     arguments:
    #         $someArgument: 'some_value'

    AppBundle\Services\FileUploader:
        arguments:
            $targetDirectory: '%upload_directory%'