<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Category;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NonUniqueResultException;

/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends EntityRepository
{
    /**
     * Find all active products
     *
     * @return mixed
     */
    public function findActive()
    {
        return $this
            ->createQueryBuilder('p')
            ->join('p.category', 'c')
            ->where('p.active = :active')
            ->andWhere('c.active = :active')
            ->setParameter('active', 1)
            ->getQuery()
            ->getResult();
    }

    /**
     * Find product by category
     *
     * @param Category $category
     * @return mixed
     */
    public function findByCategory(Category $category)
    {
        return $this
            ->createQueryBuilder('p')
            ->where('p.category = :category')
            ->setParameter('category', $category)
            ->getQuery()
            ->getResult();
    }

    /**
     * @param $page
     * @param $theNumberOnThePage
     * @return mixed
     */
    public function findByPage($page, $theNumberOnThePage)
    {
        $lastResult = $page * $theNumberOnThePage;
        $firstResult = $lastResult - $theNumberOnThePage;

        return $this
            ->createQueryBuilder('p')
            ->setFirstResult($firstResult)
            ->setMaxResults($theNumberOnThePage)
            ->getQuery()
            ->getResult();
    }

    /**
     * @return mixed
     * @throws NonUniqueResultException
     */
    public function getTheQuantityOfAllProducts()
    {
        return $this
            ->createQueryBuilder('p')
            ->select('count(p.id)')
            ->getQuery()
            ->getSingleScalarResult();
    }

    public function findByRating(){
        return $this
            ->createQueryBuilder('p')
            ->orderBy('p.rating', 'DESC')
            ->getQuery()
            ->getResult();
    }

    public function findBestProducts(){
        return $this
            ->createQueryBuilder('p')
            ->setFirstResult(0)
            ->setMaxResults(10)
            ->orderBy('p.rating', 'DESC')
            ->getQuery()
            ->getResult();
    }
}
