<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Category;
use AppBundle\Entity\Shop;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NonUniqueResultException;

/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends EntityRepository
{
    /**
     * Find all active products
     *
     * @return mixed
     */
    public function findActive()
    {
        return $this
            ->createQueryBuilder('p')
            ->join('p.category', 'c')
            ->where('p.active = :active')
            ->andWhere('c.active = :active')
            ->setParameter('active', 1)
            ->getQuery()
            ->getResult();
    }

    /**
     * Find product by category
     *
     * @param Category $category
     * @param int      $page
     * @param int      $theNumberOnThePage
     * @param array    $sort
     * @return mixed
     */
    public function findByCategory(Category $category, int $page = 1, int $theNumberOnThePage = 10, array $sort = ['id' => 'ASC'])
    {
        $lastResult  = $page * $theNumberOnThePage;
        $firstResult = $lastResult - $theNumberOnThePage;

        foreach ($sort as $field => $order) {
            return $this
                ->createQueryBuilder('p')
                ->where('p.category = :category')
                ->setParameter('category', $category)
                ->orderBy("p.{$field}", $order)
                ->setFirstResult($firstResult)
                ->setMaxResults($theNumberOnThePage)
                ->getQuery()
                ->getResult();
        }
    }

    /**
     * @param int $page
     * @param int $theNumberOnThePage
     * @return mixed
     */
    public function findByPage(int $page, int $theNumberOnThePage)
    {
        $lastResult  = $page * $theNumberOnThePage;
        $firstResult = $lastResult - $theNumberOnThePage;

        return $this
            ->createQueryBuilder('p')
            ->setFirstResult($firstResult)
            ->setMaxResults($theNumberOnThePage)
            ->getQuery()
            ->getResult();
    }

    /**
     * Quantity all products
     *
     * @param array $where
     * @return mixed
     * @throws NonUniqueResultException
     */
    public function getTheQuantityOfAllProducts(array $where = null)
    {
        if ($where == null) {
            return $this
                ->createQueryBuilder('p')
                ->select('count(p.id)')
                ->getQuery()
                ->getSingleScalarResult();
        } else {
            foreach ($where as $field => $item) {
                return $this
                    ->createQueryBuilder('p')
                    ->select('count(p.id)')
                    ->where('p.' . $field . ' = :item')
                    ->setParameter('item', $item)
                    ->getQuery()
                    ->getSingleScalarResult();
            }
        }

        return null;
    }

    /**
     * Find product by rating
     *
     * @return mixed
     */
    public function findByRating()
    {
        return $this
            ->createQueryBuilder('p')
            ->orderBy('p.rating', 'DESC')
            ->getQuery()
            ->getResult();
    }

    /**
     * @return mixed
     */
    public function findBestProducts()
    {
        return $this
            ->createQueryBuilder('p')
            ->setFirstResult(0)
            ->setMaxResults(10)
            ->orderBy('p.rating', 'DESC')
            ->getQuery()
            ->getResult();
    }

    /**
     * @param array $sort
     * @param int   $page
     * @param int   $theNumberOnThePage
     * @return mixed
     */
    public function findBySortAndPage(array $sort, int $page, int $theNumberOnThePage)
    {
        $lastResult  = $page * $theNumberOnThePage;
        $firstResult = $lastResult - $theNumberOnThePage;

        foreach ($sort as $field => $order) {
            return $this
                ->createQueryBuilder('p')
                ->orderBy('p.' . lcfirst($field), $order)
                ->setFirstResult($firstResult)
                ->setMaxResults($theNumberOnThePage)
                ->getQuery()
                ->getResult();
        }
    }
}
