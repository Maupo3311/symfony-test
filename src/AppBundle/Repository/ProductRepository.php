<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Category;
use AppBundle\Entity\Shop;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NonUniqueResultException;

/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends EntityRepository
{
    /**
     * Quantity all products
     *
     * @param array $where
     * @return mixed
     * @throws NonUniqueResultException
     */
    public function getTheQuantityOfAllProducts(array $where = null)
    {
        if ($where == null) {
            return $this->createQueryBuilder('p')
                ->select('count(p.id)')
                ->getQuery()
                ->getSingleScalarResult();
        } else {
            foreach ($where as $field => $item) {
                return $this->createQueryBuilder('p')
                    ->select('count(p.id)')
                    ->where('p.' . $field . ' = :item')
                    ->setParameter('item', $item)
                    ->getQuery()
                    ->getSingleScalarResult();
            }
        }

        return null;
    }

    /**
     * Find product by rating
     *
     * @return mixed
     */
    public function findByRating()
    {
        return $this->createQueryBuilder('p')
            ->orderBy('p.rating', 'DESC')
            ->getQuery()
            ->getResult();
    }

    /**
     * @return mixed
     */
    public function findBestProducts()
    {
        return $this->createQueryBuilder('p')
            ->where('p.active = 1')
            ->setFirstResult(0)
            ->setMaxResults(10)
            ->orderBy('p.rating', 'DESC')
            ->getQuery()
            ->getResult();
    }

    /**
     * @param string $filtrationField
     * @param        $from
     * @param        $to
     * @param array  $sort
     * @param int    $page
     * @param int    $theNumberOnThePage
     * @return mixed
     */
    public function findByFiltrationAndPagination(
        string $filtrationField, $from, $to, array $sort, int $page, int $theNumberOnThePage)
    {
        $lastResult  = $page * $theNumberOnThePage;
        $firstResult = $lastResult - $theNumberOnThePage;

        foreach ($sort as $field => $order) {
            return $this->createQueryBuilder('p')
                ->where('p.' . $filtrationField . '>' . $from)
                ->andWhere('p.' . $filtrationField . '<' . $to)
                ->orderBy('p.' . lcfirst($field), $order)
                ->setFirstResult($firstResult)
                ->setMaxResults($theNumberOnThePage)
                ->getQuery()
                ->getResult();
        }
    }

    /**
     * @param array $parameters
     * @param array $availableCategories
     * @return mixed
     */
    public function findByParameters(array $parameters, array $availableCategories = [])
    {
        $lastResult  = $parameters['page'] * $parameters['theNumberOnThePage'];
        $firstResult = $lastResult - $parameters['theNumberOnThePage'];

        $query = $this->createQueryBuilder('p')
            ->where("p.title LIKE :search")
            ->andWhere('p.active = 1');

        if (!empty($availableCategories)) {
            $categoryWhere = '';

            /** @var Category $category */
            foreach ($availableCategories as $category) {
                $categoryWhere .= 'p.category = ' . $category->getId() . ' OR ';
            }

            $categoryWhere = substr($categoryWhere, 0, -3);
            $query->andWhere($categoryWhere);
        }

        $result = $query->andWhere("p.{$parameters['filtrationField']} > {$parameters['from']}")
            ->andWhere("p.{$parameters['filtrationField']} < {$parameters['to']}")
            ->orderBy('p.' . lcfirst($parameters['field']), $parameters['order'])
            ->setFirstResult($firstResult)
            ->setMaxResults($parameters['theNumberOnThePage'])
            ->setParameter('search', "%{$parameters['search']}%")
            ->getQuery()
            ->getResult();

        return $result;
    }

    /**
     * @param array    $parameters
     * @param Category $category
     * @return mixed
     */
    public function findByParametersAndCategory(array $parameters, Category $category)
    {
        $lastResult  = $parameters['page'] * $parameters['theNumberOnThePage'];
        $firstResult = $lastResult - $parameters['theNumberOnThePage'];

        return $this->createQueryBuilder('p')
            ->where("p.title LIKE :search")
            ->andWhere('p.active = 1')
            ->andWhere("p.category = {$category->getId()}")
            ->andWhere("p.{$parameters['filtrationField']} > {$parameters['from']}")
            ->andWhere("p.{$parameters['filtrationField']} < {$parameters['to']}")
            ->orderBy('p.' . lcfirst($parameters['field']), $parameters['order'])
            ->setFirstResult($firstResult)
            ->setMaxResults($parameters['theNumberOnThePage'])
            ->setParameter('search', "%{$parameters['search']}%")
            ->getQuery()
            ->getResult();
    }

    /**
     * @param array $parameters
     * @param array $availableCategories
     * @return mixed
     * @throws NonUniqueResultException
     */
    public function getQuantityByParameters(array $parameters, array $availableCategories = [])
    {
        $query = $this->createQueryBuilder('p')
            ->select('count(p.id)')
            ->where('p.title LIKE :search')
            ->andWhere('p.active = 1');

        if (!empty($availableCategories)) {
            $categoryWhere = '';

            /** @var Category $category */
            foreach ($availableCategories as $category) {
                $categoryWhere .= 'p.category = ' . $category->getId() . ' OR ';
            }

            $categoryWhere = substr($categoryWhere, 0, -3);
            $query->andWhere($categoryWhere);
        }

        $result = $query->andWhere("p.{$parameters['filtrationField']} > {$parameters['from']}")
            ->andWhere("p.{$parameters['filtrationField']} < {$parameters['to']}")
            ->setParameter('search', "%{$parameters['search']}%")
            ->getQuery()
            ->getSingleScalarResult();

        return $result;
    }

    /**
     * @param array    $parameters
     * @param Category $category
     * @return mixed
     * @throws NonUniqueResultException
     */
    public function getQuantityByParametersAndCategory(array $parameters, Category $category)
    {
        return $this->createQueryBuilder('p')
            ->select('count(p.id)')
            ->where('p.title LIKE :search')
            ->andWhere('p.active = 1')
            ->andWhere("p.category = {$category->getId()}")
            ->andWhere("p.{$parameters['filtrationField']} > {$parameters['from']}")
            ->andWhere("p.{$parameters['filtrationField']} < {$parameters['to']}")
            ->setParameter('search', "%{$parameters['search']}%")
            ->getQuery()
            ->getSingleScalarResult();
    }
}
